\i sql/basic_setup.sql
SET synchronous_commit = on;
-- Schema setup
CREATE TABLE demo (
	seq serial primary key,
	tx text,
	ts timestamp,
	jsb jsonb,
	js json,
	ba bytea
);
SELECT 'init' FROM pg_create_logical_replication_slot('regression_slot', 'pglogical_output');
 ?column? 
----------
 init
(1 row)

-- Queue up some work to decode with a variety of types
INSERT INTO demo(tx) VALUES ('textval');
INSERT INTO demo(ba) VALUES (BYTEA '\xDEADBEEF0001');
INSERT INTO demo(ts, tx) VALUES (TIMESTAMP '2045-09-12 12:34:56.00', 'blah');
INSERT INTO demo(js, jsb) VALUES ('{"key":"value"}', '{"key":"value"}');
-- Rolled back txn
BEGIN;
DELETE FROM demo;
INSERT INTO demo(tx) VALUES ('blahblah');
ROLLBACK;
-- Multi-statement transaction with subxacts
BEGIN;
SAVEPOINT sp1;
INSERT INTO demo(tx) VALUES ('row1');
RELEASE SAVEPOINT sp1;
SAVEPOINT sp2;
UPDATE demo SET tx = 'update-rollback' WHERE tx = 'row1';
ROLLBACK TO SAVEPOINT sp2;
SAVEPOINT sp3;
INSERT INTO demo(tx) VALUES ('row2');
INSERT INTO demo(tx) VALUES ('row3');
RELEASE SAVEPOINT sp3;
SAVEPOINT sp4;
DELETE FROM demo WHERE tx = 'row2';
RELEASE SAVEPOINT sp4;
SAVEPOINT sp5;
UPDATE demo SET tx = 'updated' WHERE tx = 'row1';
COMMIT;
-- txn with catalog changes
BEGIN;
CREATE TABLE cat_test(id integer);
INSERT INTO cat_test(id) VALUES (42);
COMMIT;
-- Aborted subxact with catalog changes
BEGIN;
INSERT INTO demo(tx) VALUES ('1');
SAVEPOINT sp1;
ALTER TABLE demo DROP COLUMN tx;
ROLLBACK TO SAVEPOINT sp1;
INSERT INTO demo(tx) VALUES ('2');
COMMIT;
-- Simple decode with text-format tuples
TRUNCATE TABLE json_decoding_output;
INSERT INTO json_decoding_output(ch, rn)
SELECT
  data::jsonb,
  row_number() OVER ()
FROM pg_logical_slot_peek_changes('regression_slot',
	NULL, NULL,
	'expected_encoding', 'UTF8',
	'min_proto_version', '1',
	'max_proto_version', '1',
	'startup_params_format', '1',
	'proto_format', 'json',
	'no_txinfo', 't');
SELECT * FROM get_startup_params();
               key                | value  
----------------------------------+--------
 binary.binary_basetypes          | "f"
 binary.float4_byval              | "t"
 binary.float8_byval              | "t"
 binary.internal_basetypes        | "f"
 binary.sizeof_datum              | "8"
 binary.sizeof_int                | "4"
 binary.sizeof_long               | "8"
 coltypes                         | "f"
 database_encoding                | "UTF8"
 encoding                         | "UTF8"
 forward_changeset_origins        | "f"
 hooks.row_filter_enabled         | "f"
 hooks.shutdown_hook_enabled      | "f"
 hooks.startup_hook_enabled       | "f"
 hooks.transaction_filter_enabled | "f"
 max_proto_version                | "1"
 min_proto_version                | "1"
 no_txinfo                        | "t"
 relmeta_cache_size               | "0"
(19 rows)

SELECT * FROM get_queued_data();
                                                                             data                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"action": "B", "has_catalog_changes": "f"}
 {"action": "I", "newtuple": {"ba": null, "js": null, "ts": null, "tx": "textval", "jsb": null, "seq": 1}, "relation": ["public", "demo"]}
 {"action": "C"}
 {"action": "B", "has_catalog_changes": "f"}
 {"action": "I", "newtuple": {"ba": "\\xdeadbeef0001", "js": null, "ts": null, "tx": null, "jsb": null, "seq": 2}, "relation": ["public", "demo"]}
 {"action": "C"}
 {"action": "B", "has_catalog_changes": "f"}
 {"action": "I", "newtuple": {"ba": null, "js": null, "ts": "2045-09-12T12:34:56", "tx": "blah", "jsb": null, "seq": 3}, "relation": ["public", "demo"]}
 {"action": "C"}
 {"action": "B", "has_catalog_changes": "f"}
 {"action": "I", "newtuple": {"ba": null, "js": {"key": "value"}, "ts": null, "tx": null, "jsb": {"key": "value"}, "seq": 4}, "relation": ["public", "demo"]}
 {"action": "C"}
 {"action": "B", "has_catalog_changes": "f"}
 {"action": "I", "newtuple": {"ba": null, "js": null, "ts": null, "tx": "row1", "jsb": null, "seq": 6}, "relation": ["public", "demo"]}
 {"action": "I", "newtuple": {"ba": null, "js": null, "ts": null, "tx": "row2", "jsb": null, "seq": 7}, "relation": ["public", "demo"]}
 {"action": "I", "newtuple": {"ba": null, "js": null, "ts": null, "tx": "row3", "jsb": null, "seq": 8}, "relation": ["public", "demo"]}
 {"action": "D", "oldtuple": {"ba": null, "js": null, "ts": null, "tx": null, "jsb": null, "seq": 7}, "relation": ["public", "demo"]}
 {"action": "U", "newtuple": {"ba": null, "js": null, "ts": null, "tx": "updated", "jsb": null, "seq": 6}, "relation": ["public", "demo"]}
 {"action": "C"}
 {"action": "B", "has_catalog_changes": "t"}
 {"action": "I", "newtuple": {"id": 42}, "relation": ["public", "cat_test"]}
 {"action": "C"}
 {"action": "B", "has_catalog_changes": "f"}
 {"action": "I", "newtuple": {"ba": null, "js": null, "ts": null, "tx": "1", "jsb": null, "seq": 9}, "relation": ["public", "demo"]}
 {"action": "I", "newtuple": {"ba": null, "js": null, "ts": null, "tx": "2", "jsb": null, "seq": 10}, "relation": ["public", "demo"]}
 {"action": "C"}
 {"action": "B", "has_catalog_changes": "t"}
 {"action": "C"}
(28 rows)

TRUNCATE TABLE json_decoding_output;
\i sql/basic_teardown.sql
SELECT 'drop' FROM pg_drop_replication_slot('regression_slot');
 ?column? 
----------
 drop
(1 row)

DROP TABLE demo;
DROP TABLE cat_test;
