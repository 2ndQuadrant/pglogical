/* First test whether a table's replication set can be properly manipulated */
\c regression
SELECT pglogical.replicate_ddl_command($$
CREATE TABLE public.test_tbl(id serial primary key, data text);
CREATE MATERIALIZED VIEW public.test_mv AS (SELECT * FROM public.test_tbl);
$$);
 replicate_ddl_command 
-----------------------
 t
(1 row)

SELECT * FROM pglogical.replication_set_add_table('default', 'test_tbl');
 replication_set_add_table 
---------------------------
 t
(1 row)

INSERT INTO test_tbl VALUES (1, 'a');
REFRESH MATERIALIZED VIEW test_mv;
INSERT INTO test_tbl VALUES (2, 'b');
SELECT pg_xlog_wait_remote_apply(pg_current_xlog_location(), 0);
 pg_xlog_wait_remote_apply 
---------------------------
 
(1 row)

SELECT * FROM test_tbl;
 id | data 
----+------
  1 | a
  2 | b
(2 rows)

SELECT * FROM test_mv;
 id | data 
----+------
  1 | a
(1 row)

\c postgres
SELECT * FROM test_tbl;
 id | data 
----+------
  1 | a
  2 | b
(2 rows)

SELECT * FROM test_mv;
 id | data 
----+------
(0 rows)

\c regression
SELECT pglogical.replicate_ddl_command($$
	DROP TABLE public.test_tbl CASCADE;
$$);
NOTICE:  drop cascades to materialized view public.test_mv
CONTEXT:  during execution of queued SQL statement: 
	DROP TABLE public.test_tbl CASCADE;

NOTICE:  drop cascades to 1 other object
DETAIL:  table public.test_tbl in replication set default
CONTEXT:  during execution of queued SQL statement: 
	DROP TABLE public.test_tbl CASCADE;

 replicate_ddl_command 
-----------------------
 t
(1 row)

