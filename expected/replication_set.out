/* First test whether a table's replication set can be properly manipulated */
SELECT * FROM pglogical_regress_variables()
\gset
\c :provider_dsn
SELECT pglogical.replicate_ddl_command($$
CREATE SCHEMA normalschema;
CREATE SCHEMA "strange.schema-IS";
CREATE TABLE public.test_publicschema(id serial primary key, data text);
CREATE TABLE normalschema.test_normalschema(id serial primary key);
CREATE TABLE "strange.schema-IS".test_strangeschema(id serial primary key);
CREATE TABLE public.test_nopkey(id int);
CREATE UNLOGGED TABLE public.test_unlogged(id int primary key);
$$);
 replicate_ddl_command 
-----------------------
 t
(1 row)

SELECT pg_xlog_wait_remote_apply(pg_current_xlog_location(), pid) FROM pg_stat_replication;
 pg_xlog_wait_remote_apply 
---------------------------
 
(1 row)

-- show initial replication sets
SELECT nspname, relname, set_name FROM pglogical.tables
 WHERE relname IN ('test_publicschema', 'test_normalschema', 'test_strangeschema', 'test_nopkey') ORDER BY 1,2,3;
      nspname      |      relname       | set_name 
-------------------+--------------------+----------
 normalschema      | test_normalschema  | 
 public            | test_nopkey        | 
 public            | test_publicschema  | 
 strange.schema-IS | test_strangeschema | 
(4 rows)

-- not existing replication set
SELECT * FROM pglogical.replication_set_add_table('nonexisting', 'test_publicschema');
ERROR:  replication set nonexisting not found
-- create some replication sets
SELECT * FROM pglogical.create_replication_set('repset_replicate_all');
 create_replication_set 
------------------------
             1767380104
(1 row)

SELECT * FROM pglogical.create_replication_set('repset_replicate_instrunc', replicate_update := false, replicate_delete := false);
 create_replication_set 
------------------------
              348382733
(1 row)

SELECT * FROM pglogical.create_replication_set('repset_replicate_insupd', replicate_delete := false, replicate_truncate := false);
 create_replication_set 
------------------------
              128878480
(1 row)

-- add tables
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_all', 'test_publicschema');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT * FROM pglogical.replication_set_add_table('repset_replicate_instrunc', 'normalschema.test_normalschema');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT * FROM pglogical.replication_set_add_table('repset_replicate_insupd', 'normalschema.test_normalschema');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT * FROM pglogical.replication_set_add_table('repset_replicate_insupd', '"strange.schema-IS".test_strangeschema');
 replication_set_add_table 
---------------------------
 t
(1 row)

-- should fail
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_all', 'test_unlogged');
ERROR:  UNLOGGED and TEMP tables cannot be replicated
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_all', 'test_nopkey');
ERROR:  table test_nopkey cannot be added to replication set repset_replicate_all
DETAIL:  table does not have PRIMARY KEY and given replication set is configured to replicate UPDATEs and/or DELETEs
HINT:  Add a PRIMARY KEY to the table
-- success
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_instrunc', 'test_nopkey');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT * FROM pglogical.alter_replication_set('repset_replicate_insupd', replicate_truncate := true);
 alter_replication_set 
-----------------------
             128878480
(1 row)

-- fail again
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_insupd', 'test_nopkey');
ERROR:  table test_nopkey cannot be added to replication set repset_replicate_insupd
DETAIL:  table does not have PRIMARY KEY and given replication set is configured to replicate UPDATEs and/or DELETEs
HINT:  Add a PRIMARY KEY to the table
SELECT * FROM pglogical.replication_set_add_all_tables('default', '{public}');
ERROR:  table test_nopkey cannot be added to replication set default
DETAIL:  table does not have PRIMARY KEY and given replication set is configured to replicate UPDATEs and/or DELETEs
HINT:  Add a PRIMARY KEY to the table
SELECT * FROM pglogical.alter_replication_set('repset_replicate_instrunc', replicate_update := true);
ERROR:  replication set repset_replicate_instrunc cannot be altered to replicate UPDATEs or DELETEs because it contains tables without PRIMARY KEY
SELECT * FROM pglogical.alter_replication_set('repset_replicate_instrunc', replicate_delete := true);
ERROR:  replication set repset_replicate_instrunc cannot be altered to replicate UPDATEs or DELETEs because it contains tables without PRIMARY KEY
-- check the replication sets
SELECT nspname, relname, set_name FROM pglogical.tables
 WHERE relname IN ('test_publicschema', 'test_normalschema', 'test_strangeschema', 'test_nopkey') ORDER BY 1,2,3;
      nspname      |      relname       |         set_name          
-------------------+--------------------+---------------------------
 normalschema      | test_normalschema  | repset_replicate_instrunc
 normalschema      | test_normalschema  | repset_replicate_insupd
 public            | test_nopkey        | repset_replicate_instrunc
 public            | test_publicschema  | repset_replicate_all
 strange.schema-IS | test_strangeschema | repset_replicate_insupd
(5 rows)

SELECT * FROM pglogical.replication_set_add_all_tables('default_insert_only', '{public}');
 replication_set_add_all_tables 
--------------------------------
 t
(1 row)

SELECT nspname, relname, set_name FROM pglogical.tables
 WHERE relname IN ('test_publicschema', 'test_normalschema', 'test_strangeschema', 'test_nopkey') ORDER BY 1,2,3;
      nspname      |      relname       |         set_name          
-------------------+--------------------+---------------------------
 normalschema      | test_normalschema  | repset_replicate_instrunc
 normalschema      | test_normalschema  | repset_replicate_insupd
 public            | test_nopkey        | default_insert_only
 public            | test_nopkey        | repset_replicate_instrunc
 public            | test_publicschema  | default_insert_only
 public            | test_publicschema  | repset_replicate_all
 strange.schema-IS | test_strangeschema | repset_replicate_insupd
(7 rows)

--too short
SELECT pglogical.create_replication_set('');
ERROR:  replication set name cannot be empty
\set VERBOSITY terse
SELECT pglogical.replicate_ddl_command($$
	DROP TABLE public.test_publicschema CASCADE;
	DROP SCHEMA normalschema CASCADE;
	DROP SCHEMA "strange.schema-IS" CASCADE;
	DROP TABLE public.test_nopkey CASCADE;
$$);
NOTICE:  drop cascades to 2 other objects
NOTICE:  drop cascades to table normalschema.test_normalschema
NOTICE:  drop cascades to 2 other objects
NOTICE:  drop cascades to table "strange.schema-IS".test_strangeschema
NOTICE:  drop cascades to table "strange.schema-IS".test_strangeschema membership in replication set repset_replicate_insupd
NOTICE:  drop cascades to 2 other objects
 replicate_ddl_command 
-----------------------
 t
(1 row)

\c :subscriber_dsn
SELECT * FROM pglogical.replication_set;
   set_id   | set_nodeid |      set_name       | replicate_insert | replicate_update | replicate_delete | replicate_truncate 
------------+------------+---------------------+------------------+------------------+------------------+--------------------
  828867312 | 1755434425 | default             | t                | t                | t                | t
 3318003856 | 1755434425 | default_insert_only | t                | f                | f                | t
 2796587818 | 1755434425 | ddl_sql             | t                | f                | f                | f
(3 rows)

