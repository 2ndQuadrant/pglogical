/* First test whether a table's replication set can be properly manipulated */
\c regression
SELECT pglogical.replicate_ddl_command($$
CREATE SCHEMA normalschema;
CREATE SCHEMA "strange.schema-IS";
CREATE TABLE public.test_publicschema(id serial primary key, data text);
CREATE TABLE normalschema.test_normalschema(id serial primary key);
CREATE TABLE "strange.schema-IS".test_strangeschema(id serial primary key);
CREATE TABLE public.test_nopkey(id int);
CREATE UNLOGGED TABLE public.test_unlogged(id int primary key);
$$);
 replicate_ddl_command 
-----------------------
 t
(1 row)

SELECT pg_xlog_wait_remote_apply(pg_current_xlog_location(), pid) FROM pg_stat_replication;
 pg_xlog_wait_remote_apply 
---------------------------
 
(1 row)

-- show initial replication sets
SELECT * FROM pglogical.tables WHERE relname IN ('test_publicschema', 'test_normalschema', 'test_strangeschema', 'test_nopkey') ORDER BY 1,2,3;
 set_name |      nspname      |      relname       
----------+-------------------+--------------------
 all      | normalschema      | test_normalschema
 all      | public            | test_nopkey
 all      | public            | test_publicschema
 all      | strange.schema-IS | test_strangeschema
 default  | normalschema      | test_normalschema
 default  | public            | test_publicschema
 default  | strange.schema-IS | test_strangeschema
(7 rows)

-- not existing replication set
SELECT * FROM pglogical.replication_set_add_table('nonexisting', 'test_publicschema');
ERROR:  replication set nonexisting not found
-- create some replication sets
SELECT * FROM pglogical.create_replication_set('repset_replicate_all');
 create_replication_set 
------------------------
             1746339162
(1 row)

SELECT * FROM pglogical.create_replication_set('repset_replicate_instrunc', replicate_update := false, replicate_delete := false);
 create_replication_set 
------------------------
             4251154896
(1 row)

SELECT * FROM pglogical.create_replication_set('repset_replicate_insupd', replicate_delete := false, replicate_truncate := false);
 create_replication_set 
------------------------
             2088548767
(1 row)

-- add tables
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_all', 'test_publicschema');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT * FROM pglogical.replication_set_add_table('repset_replicate_instrunc', 'normalschema.test_normalschema');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT * FROM pglogical.replication_set_add_table('repset_replicate_insupd', 'normalschema.test_normalschema');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT * FROM pglogical.replication_set_add_table('repset_replicate_insupd', '"strange.schema-IS".test_strangeschema');
 replication_set_add_table 
---------------------------
 t
(1 row)

-- should fail
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_all', 'test_unlogged');
ERROR:  UNLOGGED and TEMP tables cannot be replicated
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_all', 'test_nopkey');
ERROR:  table test_nopkey cannot be added to replication set repset_replicate_all
DETAIL:  table does not have PRIMARY KEY and given replication set is configured to replicate UPDATEs and/or DELETEs
HINT:  Add a PRIMARY KEY to the table
-- success
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_instrunc', 'test_nopkey');
 replication_set_add_table 
---------------------------
 t
(1 row)

-- fail again
SELECT * FROM pglogical.replication_set_add_table('repset_replicate_insupd', 'test_nopkey');
ERROR:  table test_nopkey cannot be added to replication set repset_replicate_insupd
DETAIL:  table does not have PRIMARY KEY and given replication set is configured to replicate UPDATEs and/or DELETEs
HINT:  Add a PRIMARY KEY to the table
-- check the replication sets
SELECT * FROM pglogical.tables WHERE relname IN ('test_publicschema', 'test_normalschema', 'test_strangeschema', 'test_nopkey') ORDER BY 1,2,3;
         set_name          |      nspname      |      relname       
---------------------------+-------------------+--------------------
 all                       | normalschema      | test_normalschema
 all                       | public            | test_nopkey
 all                       | public            | test_publicschema
 all                       | strange.schema-IS | test_strangeschema
 repset_replicate_all      | public            | test_publicschema
 repset_replicate_instrunc | normalschema      | test_normalschema
 repset_replicate_instrunc | public            | test_nopkey
 repset_replicate_insupd   | normalschema      | test_normalschema
 repset_replicate_insupd   | strange.schema-IS | test_strangeschema
(9 rows)

-- make sure reserved names can't be set
SELECT * FROM pglogical.replication_set_add_table('all', 'test_publicschema');
ERROR:  replication set 'all' is reserved and cannot be manipulated
--too short
SELECT pglogical.create_replication_set('');
ERROR:  replication set name cannot be empty
SELECT pglogical.replicate_ddl_command($$
	DROP TABLE public.test_publicschema CASCADE;
	DROP SCHEMA normalschema CASCADE;
	DROP SCHEMA "strange.schema-IS" CASCADE;
$$);
NOTICE:  drop cascades to 1 other object
DETAIL:  table public.test_publicschema in replication set repset_replicate_all
CONTEXT:  during execution of queued SQL statement: 
	DROP TABLE public.test_publicschema CASCADE;
	DROP SCHEMA normalschema CASCADE;
	DROP SCHEMA "strange.schema-IS" CASCADE;

NOTICE:  drop cascades to table normalschema.test_normalschema
CONTEXT:  during execution of queued SQL statement: 
	DROP TABLE public.test_publicschema CASCADE;
	DROP SCHEMA normalschema CASCADE;
	DROP SCHEMA "strange.schema-IS" CASCADE;

NOTICE:  drop cascades to 2 other objects
DETAIL:  table normalschema.test_normalschema in replication set repset_replicate_instrunc
table normalschema.test_normalschema in replication set repset_replicate_insupd
CONTEXT:  during execution of queued SQL statement: 
	DROP TABLE public.test_publicschema CASCADE;
	DROP SCHEMA normalschema CASCADE;
	DROP SCHEMA "strange.schema-IS" CASCADE;

NOTICE:  drop cascades to table "strange.schema-IS".test_strangeschema
CONTEXT:  during execution of queued SQL statement: 
	DROP TABLE public.test_publicschema CASCADE;
	DROP SCHEMA normalschema CASCADE;
	DROP SCHEMA "strange.schema-IS" CASCADE;

NOTICE:  drop cascades to 1 other object
DETAIL:  table "strange.schema-IS".test_strangeschema in replication set repset_replicate_insupd
CONTEXT:  during execution of queued SQL statement: 
	DROP TABLE public.test_publicschema CASCADE;
	DROP SCHEMA normalschema CASCADE;
	DROP SCHEMA "strange.schema-IS" CASCADE;

 replicate_ddl_command 
-----------------------
 t
(1 row)

\c postgres
SELECT * FROM pglogical.replication_set;
   set_id   | set_name | replicate_insert | replicate_update | replicate_delete | replicate_truncate 
------------+----------+------------------+------------------+------------------+--------------------
 4294967295 | default  | t                | t                | t                | t
 4294967294 | all      | f                | f                | f                | f
(2 rows)

