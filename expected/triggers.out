SELECT * FROM pglogical_regress_variables()
\gset
\c :provider_dsn
SELECT pglogical.replicate_ddl_command($$
	CREATE TABLE public.test_trg_data(id serial primary key, data text);
$$);
 replicate_ddl_command 
-----------------------
 t
(1 row)

SELECT * FROM pglogical.replication_set_add_table('default', 'test_trg_data');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
CREATE TABLE test_trg_hist(table_name text, action text, action_id serial, original_data text, new_data text);
CREATE FUNCTION test_trg_data_hist_fn() RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'UPDATE') THEN
        INSERT INTO test_trg_hist (table_name,action,original_data,new_data)
        VALUES (TG_TABLE_NAME::TEXT, substring(TG_OP,1,1), ROW(OLD.*), ROW(NEW.*));
        RETURN NEW;
    ELSIF (TG_OP = 'DELETE') THEN
        INSERT INTO test_trg_hist (table_name,action,original_data)
        VALUES (TG_TABLE_NAME::TEXT, substring(TG_OP,1,1), ROW(OLD.*));
        RETURN OLD;
    ELSIF (TG_OP = 'INSERT') THEN
        INSERT INTO test_trg_hist (table_name,action,new_data)
        VALUES (TG_TABLE_NAME::TEXT, substring(TG_OP,1,1), ROW(NEW.*));
        RETURN NEW;
    ELSE
        RAISE WARNING 'Unknown action';
        RETURN NULL;
    END IF;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER test_trg_data_hist_trg
AFTER INSERT OR UPDATE OR DELETE ON test_trg_data
FOR EACH ROW EXECUTE PROCEDURE test_trg_data_hist_fn();
\c :provider_dsn
INSERT INTO test_trg_data(data) VALUES ('no_history');
SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
SELECT * FROM test_trg_data;
 id |    data    
----+------------
  1 | no_history
(1 row)

SELECT * FROM test_trg_hist;
 table_name | action | action_id | original_data | new_data 
------------+--------+-----------+---------------+----------
(0 rows)

ALTER TABLE test_trg_data ENABLE REPLICA TRIGGER test_trg_data_hist_trg;
\c :provider_dsn
INSERT INTO test_trg_data(data) VALUES ('yes_history');
UPDATE test_trg_data SET data = 'yes_history';
DELETE FROM test_trg_data;
SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
SELECT * FROM test_trg_data;
 id | data 
----+------
(0 rows)

SELECT * FROM test_trg_hist;
  table_name   | action | action_id |  original_data  |    new_data     
---------------+--------+-----------+-----------------+-----------------
 test_trg_data | I      |         1 |                 | (2,yes_history)
 test_trg_data | U      |         2 | (1,no_history)  | (1,yes_history)
 test_trg_data | U      |         3 | (2,yes_history) | (2,yes_history)
 test_trg_data | D      |         4 | (1,yes_history) | 
 test_trg_data | D      |         5 | (2,yes_history) | 
(5 rows)

DROP TABLE test_trg_hist CASCADE;
\c :provider_dsn
SELECT pglogical.replicate_ddl_command($$
        CREATE TABLE public.basic_dml (
                id serial primary key,
                other integer,
                data text,
                something interval
        );
$$);
 replicate_ddl_command 
-----------------------
 t
(1 row)

SELECT * FROM pglogical.replication_set_add_table('default', 'basic_dml');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
-- create row filter trigger
CREATE FUNCTION filter_basic_dml_fn() RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP in ('UPDATE', 'INSERT')) THEN
-- treating 'DELETE' as pass-through
        IF (NEW.id > 1 AND NEW.data IS DISTINCT FROM 'baz' AND NEW.data IS DISTINCT FROM 'bbb') THEN
            RETURN NEW;
        ELSE
            RETURN NULL;
        END IF;
    ELSE
        RAISE WARNING 'Unknown action';
        RETURN NULL;
    END IF;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER filter_basic_dml_trg
BEFORE INSERT OR UPDATE ON basic_dml
FOR EACH ROW EXECUTE PROCEDURE filter_basic_dml_fn();
\c :provider_dsn
-- insert into table at provider
\COPY basic_dml FROM STDIN WITH CSV
SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
-- rows received at suscriber as trigger is not enabled yet.
SELECT * from basic_dml ORDER BY id;
  id  | other | data | something 
------+-------+------+-----------
 5000 |     1 | aaa  | @ 1 hour
 5001 |     2 | bbb  | @ 2 years
 5002 |     3 | ccc  | @ 3 mins
 5003 |     4 | ddd  | @ 4 days
(4 rows)

-- Now enable trigger:
ALTER TABLE basic_dml ENABLE REPLICA TRIGGER filter_basic_dml_trg;
\c :provider_dsn
TRUNCATE basic_dml;
-- check basic insert replication
INSERT INTO basic_dml(other, data, something)
VALUES (5, 'foo', '1 minute'::interval),
       (4, 'bar', '12 weeks'::interval),
       (3, 'baz', '2 years 1 hour'::interval),
       (2, 'qux', '8 months 2 days'::interval),
       (1, NULL, NULL);
SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
-- rows filtered at suscriber as trigger is enabled.
SELECT * from basic_dml ORDER BY id;
 id | other | data |    something    
----+-------+------+-----------------
  2 |     4 | bar  | @ 84 days
  4 |     2 | qux  | @ 8 mons 2 days
  5 |     1 |      | 
(3 rows)

\set VERBOSITY terse
DROP FUNCTION test_trg_data_hist_fn() CASCADE;
NOTICE:  drop cascades to trigger test_trg_data_hist_trg on table test_trg_data
DROP FUNCTION filter_basic_dml_fn() CASCADE;
NOTICE:  drop cascades to trigger filter_basic_dml_trg on table basic_dml
\c :provider_dsn
\set VERBOSITY terse
SELECT pglogical.replicate_ddl_command($$
	DROP TABLE public.test_trg_data CASCADE;
	DROP TABLE public.basic_dml CASCADE;
$$);
NOTICE:  drop cascades to table public.test_trg_data membership in replication set default
NOTICE:  drop cascades to table public.basic_dml membership in replication set default
 replicate_ddl_command 
-----------------------
 t
(1 row)

