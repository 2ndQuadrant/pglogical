-- basic builtin datatypes
SELECT * FROM pglogical_regress_variables()
\gset
-- create and populate table at provider
\c :provider_dsn
CREATE TABLE public.basic_dml (
	id serial primary key,
	other integer,
	data text,
	something interval
);
SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | 
(1 row)

INSERT INTO basic_dml(other, data, something)
VALUES (5, 'foo', '1 minute'::interval),
       (4, 'bar', '12 weeks'::interval),
       (3, 'baz', '2 years 1 hour'::interval),
       (2, 'qux', '8 months 2 days'::interval),
       (1, NULL, NULL);
\c :subscriber_dsn
-- create table on subscriber to receive replicated filtered data from provider
-- there are some extra columns too, and we omit 'other' as a non-replicated
-- table on upstream only.
CREATE TABLE public.basic_dml (
	id serial primary key,
	data text,
	something interval,
	subonly integer,
	subonly_def integer DEFAULT 99
);
SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_dml'::regclass, ARRAY['default']);
 nspname |  relname  |                att_list                 | has_row_filter 
---------+-----------+-----------------------------------------+----------------
 public  | basic_dml | {id,data,something,subonly,subonly_def} | f
(1 row)

SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | 
(1 row)

\c :provider_dsn
-- Fails: the column filter list must include the key
SELECT * FROM pglogical.replication_set_add_table('default', 'basic_dml', synchronize_data := true, columns := '{data, something}');
ERROR:  REPLICA IDENTITY columns must be replicated
SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | 
(1 row)

-- Fails: the column filter list may not include cols that are not in the table
SELECT * FROM pglogical.replication_set_add_table('default', 'basic_dml', synchronize_data := true, columns := '{data, something, nosuchcol}');
ERROR:  table public.basic_dml does not have column nosuchcol
SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | 
(1 row)

-- At provider, add table to replication set, with filtered columns
SELECT * FROM pglogical.replication_set_add_table('default', 'basic_dml', synchronize_data := true, columns := '{id, data, something}');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | default
(1 row)

SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_dml'::regclass, ARRAY['default']);
 nspname |  relname  |      att_list       | has_row_filter 
---------+-----------+---------------------+----------------
 public  | basic_dml | {id,data,something} | f
(1 row)

SELECT id, data, something FROM basic_dml ORDER BY id;
 id | data |    something     
----+------+------------------
  1 | foo  | @ 1 min
  2 | bar  | @ 84 days
  3 | baz  | @ 2 years 1 hour
  4 | qux  | @ 8 mons 2 days
  5 |      | 
(5 rows)

SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
BEGIN;
SET LOCAL statement_timeout = '10s';
SELECT pglogical.wait_for_table_sync_complete('test_subscription', 'basic_dml');
 wait_for_table_sync_complete 
------------------------------
 
(1 row)

COMMIT;
SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_dml'::regclass, ARRAY['default']);
 nspname |  relname  |                att_list                 | has_row_filter 
---------+-----------+-----------------------------------------+----------------
 public  | basic_dml | {id,data,something,subonly,subonly_def} | f
(1 row)

SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | 
(1 row)

-- data should get replicated to subscriber
SELECT id, data, something FROM basic_dml ORDER BY id;
 id | data |    something     
----+------+------------------
  1 | foo  | @ 1 min
  2 | bar  | @ 84 days
  3 | baz  | @ 2 years 1 hour
  4 | qux  | @ 8 mons 2 days
  5 |      | 
(5 rows)

-- Test for Table with oids
\c :provider_dsn
CREATE TABLE public.basic_oids_dml (
	id serial primary key,
	other integer,
	data text,
	something interval
) with oids ;
SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_oids_dml'::regclass, ARRAY['default']);
 nspname |    relname     |         att_list          | has_row_filter 
---------+----------------+---------------------------+----------------
 public  | basic_oids_dml | {id,other,data,something} | f
(1 row)

SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_oids_dml'::regclass;
 nspname |    relname     | set_name 
---------+----------------+----------
 public  | basic_oids_dml | 
(1 row)

-- Fails: cannot use system column 'oid' explicitly
SELECT * FROM pglogical.replication_set_add_table('default', 'basic_oids_dml', columns := '{oid, id, data, something}');
ERROR:  table public.basic_oids_dml does not have column oid
SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_oids_dml'::regclass;
 nspname |    relname     | set_name 
---------+----------------+----------
 public  | basic_oids_dml | 
(1 row)

-- WITH OIDS table OK
SELECT * FROM pglogical.replication_set_add_table('default', 'basic_oids_dml', columns := '{id, data, something}');
 replication_set_add_table 
---------------------------
 t
(1 row)

SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_oids_dml'::regclass, ARRAY['default']);
 nspname |    relname     |      att_list       | has_row_filter 
---------+----------------+---------------------+----------------
 public  | basic_oids_dml | {id,data,something} | f
(1 row)

SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_oids_dml'::regclass;
 nspname |    relname     | set_name 
---------+----------------+----------
 public  | basic_oids_dml | default
(1 row)

SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
CREATE TABLE public.basic_oids_dml (
	id serial primary key,
	data text,
	something interval,
	subonly integer,
	subonly_def integer DEFAULT 99
) with oids;
\c :provider_dsn
-- check basic insert replication
INSERT INTO basic_oids_dml(other, data, something)
VALUES (5, 'foo', '1 minute'::interval),
       (4, 'bar', '12 weeks'::interval),
       (3, 'baz', '2 years 1 hour'::interval),
       (2, 'qux', '8 months 2 days'::interval),
       (1, NULL, NULL);
SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_oids_dml'::regclass, ARRAY['default']);
 nspname |    relname     |      att_list       | has_row_filter 
---------+----------------+---------------------+----------------
 public  | basic_oids_dml | {id,data,something} | f
(1 row)

UPDATE basic_oids_dml SET other = '40', data = NULL, something = '3 days'::interval WHERE id = 4;
SELECT * from basic_oids_dml ORDER BY id;
 id | other | data |    something     
----+-------+------+------------------
  1 |     5 | foo  | @ 1 min
  2 |     4 | bar  | @ 84 days
  3 |     3 | baz  | @ 2 years 1 hour
  4 |    40 |      | @ 3 days
  5 |     1 |      | 
(5 rows)

SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
SELECT id, data, something FROM basic_oids_dml ORDER BY id;
 id | data |    something     
----+------+------------------
  1 | foo  | @ 1 min
  2 | bar  | @ 84 days
  3 | baz  | @ 2 years 1 hour
  4 |      | @ 3 days
  5 |      | 
(5 rows)

\c :provider_dsn
-- Adding a table that's already selectively replicated fails
\set VERBOSITY terse
SELECT * FROM pglogical.replication_set_add_table('default', 'basic_dml', synchronize_data := true);
ERROR:  duplicate key value violates unique constraint "replication_set_table_pkey"
\set VERBOSITY default
SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | default
(1 row)

-- So does trying to re-add to change the column set
\set VERBOSITY terse
SELECT * FROM pglogical.replication_set_add_table('default', 'basic_dml', synchronize_data := true, columns := '{id, data}');
ERROR:  duplicate key value violates unique constraint "replication_set_table_pkey"
\set VERBOSITY default
SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | default
(1 row)

-- Shouldn't be able to drop a replicated col in a rel
-- but due to RM#5916 you can
BEGIN;
ALTER TABLE public.basic_dml DROP COLUMN data;
SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | default
(1 row)

SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_oids_dml'::regclass, ARRAY['default']);
 nspname |    relname     |      att_list       | has_row_filter 
---------+----------------+---------------------+----------------
 public  | basic_oids_dml | {id,data,something} | f
(1 row)

ROLLBACK;
-- Even when wrapped (RM#5916)
BEGIN;
SELECT pglogical.replicate_ddl_command($$
ALTER TABLE public.basic_dml DROP COLUMN data;
$$);
 replicate_ddl_command 
-----------------------
 t
(1 row)

SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | default
(1 row)

SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_oids_dml'::regclass, ARRAY['default']);
 nspname |    relname     |      att_list       | has_row_filter 
---------+----------------+---------------------+----------------
 public  | basic_oids_dml | {id,data,something} | f
(1 row)

ROLLBACK;
-- CASCADE should be allowed though
BEGIN;
ALTER TABLE public.basic_dml DROP COLUMN data CASCADE;
SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | default
(1 row)

SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_oids_dml'::regclass, ARRAY['default']);
 nspname |    relname     |      att_list       | has_row_filter 
---------+----------------+---------------------+----------------
 public  | basic_oids_dml | {id,data,something} | f
(1 row)

SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | default
(1 row)

ROLLBACK;
BEGIN;
SELECT pglogical.replicate_ddl_command($$
ALTER TABLE public.basic_dml DROP COLUMN data CASCADE;
$$);
 replicate_ddl_command 
-----------------------
 t
(1 row)

SELECT nspname, relname, att_list, has_row_filter FROM pglogical.show_repset_table_info('basic_oids_dml'::regclass, ARRAY['default']);
 nspname |    relname     |      att_list       | has_row_filter 
---------+----------------+---------------------+----------------
 public  | basic_oids_dml | {id,data,something} | f
(1 row)

SELECT nspname, relname, set_name FROM pglogical.tables
WHERE relid = 'public.basic_dml'::regclass;
 nspname |  relname  | set_name 
---------+-----------+----------
 public  | basic_dml | default
(1 row)

ROLLBACK;
-- We can drop a non-replicated col. We must not replicate this DDL because in
-- this case the downstream doesn't have the 'other' column and apply will
-- fail.
ALTER TABLE public.basic_dml DROP COLUMN other;
SELECT pglogical.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\set VERBOSITY terse
SELECT pglogical.replicate_ddl_command($$
	DROP TABLE public.basic_dml CASCADE;
	DROP TABLE public.basic_oids_dml CASCADE;
$$);
NOTICE:  drop cascades to table public.basic_dml membership in replication set default
NOTICE:  drop cascades to table public.basic_oids_dml membership in replication set default
 replicate_ddl_command 
-----------------------
 t
(1 row)

