# We don't care about leaks in work done only once
# during startup, so suppress them. We could possibly free
# these cleanly, but ... meh.

{
   pgl_apply_start_sync_sub
   Memcheck:Leak
   match-leak-kinds: possible,definite
   fun:*lloc*
   ...
   fun:pglogical_sync_subscription
   fun:pglogical_apply_main
}

{
   pgl_apply_start_getsub
   Memcheck:Leak
   match-leak-kinds: possible,definite
   fun:*lloc*
   ...
   fun:get_subscription
   fun:pglogical_apply_main
}

{
   pgl_apply_start_queuetable
   Memcheck:Leak
   match-leak-kinds: possible,definite
   fun:*lloc*
   ...
   fun:get_queue_table_oid
   fun:pglogical_apply_main
}

{
   pgl_apply_start_bgw
   Memcheck:Leak
   match-leak-kinds: possible,definite
   fun:*lloc*
   ...
   fun:BackgroundWorkerInitializeConnectionByOid
   fun:pglogical_apply_main
}

{
   pgl_apply_start_replorigin
   Memcheck:Leak
   match-leak-kinds: possible,definite
   fun:*lloc*
   ...
   fun:replorigin_by_name
   fun:pglogical_apply_main
}

{
   pgl_apply_start_resowner
   Memcheck:Leak
   match-leak-kinds: definite,definite
   fun:*lloc*
   ...
   fun:ResourceOwnerCreate
   fun:pglogical_apply_main
}

{
   pgl_bgw_init
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:RegisterBackgroundWorker
   fun:_PG_init
}

#
# XXX IFFY
#
# This may well indicate something unclosed that should be, and needs
# investigation.
#
#{
#   pg_index_open
#   Memcheck:Leak
#   match-leak-kinds: possible
#   fun:*lloc*
#   ...
#   fun:relation_open
#}

#
# XXX IFFY
#
# pglogical's relcache seems to confuse valgrind. But how sure are we that these
# are real false positives not leaks?
#
#
#{
#   pgl_relcache
#   Memcheck:Leak
#   match-leak-kinds: possible
#   fun:MemoryContextAlloc*
#   ...
#   fun:pglogical_relation_cache_update
#   ...
#   fun:apply_work
#}
#
#
# XXX
# 
# These produce a lot of noise. They may be real leaks and need looking into,
# but are suppressed for now while I look for other issues. Pg should complain
# if we fail to close an opened relation. (TODO confirm)
#
#
#{
#   pgl_relation
#   Memcheck:Leak
#   match-leak-kinds: possible
#   fun:MemoryContextAlloc*
#   ...
#   fun:relation_open
#   fun:index_open
#}


#
# XXX
#
# This is also suspect, but we probably don't leak enough to really matter
# when doing DROPs via queued SQL queries.
#
{
   pgl_drops
   Memcheck:Leak
   match-leak-kinds: possible
   fun:MemoryContextAlloc*
   ...
   fun:RemoveRelations
   ...
   fun:handle_sql
}

#
# XXX
#
# For now we're not interested in queued SQL. But problems in it should still be
# fixed, just lower priority.
#
{
   pgl_apply_queued_sql
   Memcheck:Leak
   match-leak-kinds: possible
   fun:MemoryContextAlloc*
   ...
   fun:handle_sql
   ...
   fun:apply_work
   fun:pglogical_apply_main
}


#
# Core postgres noise. It doesn't try to be memcheck friendly.
#

{
   pg_conffile
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:guc_strdup
   ...
   fun:ProcessConfigFile
}

{
   pg_start
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:BackendStartup
   fun:ServerLoop
   fun:PostmasterMain
   fun:main
}

{
   pg_bgw
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   ...
   fun:do_start_bgworker
   fun:maybe_start_bgworkers
}

{
   pg_bgw_register
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:RegisterBackgroundWorker
   fun:ApplyLauncherRegister
   fun:PostmasterMain
   fun:main
}

{
   pg_init_locks
   Memcheck:Leak
   match-leak-kinds: possible
   fun:MemoryContextAlloc*
   ...
   fun:InitLocks
   fun:CreateSharedMemoryAndSemaphores
   fun:reset_shared
   fun:PostmasterMain
   fun:main
}

{
   pg_bgw_state
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:BackgroundWorkerStateChange
}

{
   pg_ps_display
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:save_ps_display_args
   fun:main
}

#
# Pg's hash impl looks like it confuses valgrind
# (but verify TODO)
#
{
   pg_hash
   Memcheck:Leak
   match-leak-kinds: possible
   ...
   fun:element_alloc
   fun:get_hash_entry
   fun:hash_search_with_hash_value
}

{
   pg_pmmain_blah
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:strdup
   fun:PostmasterMain
   fun:main
}

{
   pg_tz
   Memcheck:Leak
   match-leak-kinds: possible
   fun:MemoryContextAlloc
   fun:element_alloc
   fun:hash_create
   fun:init_timezone_hashtable
   fun:pg_tzset
   fun:pg_timezone_initialize
   fun:InitializeGUCOptions
   fun:PostmasterMain
   fun:main
}

{
   pg_vac
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:StartAutovacuumWorker
}

{
   pg_InitPostgres
   Memcheck:Leak
   match-leak-kinds: possible
   fun:*lloc*
   ...
   fun:InitPostgres
   fun:PostgresMain
}
